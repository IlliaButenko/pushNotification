{"version":3,"sources":["modules/pages/SendNotification.tsx"],"names":["useStyles","makeStyles","theme","textField","marginLeft","spacing","marginRight","width","padding","Account","classes","dispatch","useDispatch","systems","title","value","React","useState","setTitle","iconUrl","setIconURL","image","setImage","linkUrl","setLinkUrl","text","setText","userRange","setUserRange","userNo","setUserNo","sysValue","setSysValue","methodValue","setMethodValue","pt","xl","item","component","style","display","justifyContent","paddingBottom","xs","sm","md","id","label","defaultValue","name","className","onChange","e","target","margin","variant","multiline","rows","height","multiple","event","newValue","options","getOptionLabel","option","renderTags","tagValue","getTagProps","map","index","renderInput","params","placeholder","type","disabled","color","size","onClick","data","replaceAll","sendNotification","onSendNotify","length"],"mappings":"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","file":"static/js/21.05ace608.chunk.js","sourcesContent":["import React from 'react';\r\nimport { sendNotification } from '../../redux/actions';\r\nimport Box from '@material-ui/core/Box';\r\nimport GridContainer from '../../@crema/core/GridContainer';\r\nimport Grid from '@material-ui/core/Grid';\r\n// import { AppState } from '../../redux/store';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport Chip from '@mui/material/Chip';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: '100%',\r\n        padding: '0'\r\n    },\r\n}));\r\nconst Account = () => {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch()\r\n\r\n    const onSendNotify = () => {\r\n        const data = {\r\n            title,\r\n            iconUrl,\r\n            image,\r\n            linkUrl,\r\n            text,\r\n            userNo,\r\n            userRange: userRange.replaceAll('#', ''),\r\n            sysValue,\r\n            methodValue\r\n        }\r\n        dispatch(sendNotification(data))\r\n    }\r\n\r\n    const systems = [\r\n        { title: 'Android', value: 'android' },\r\n        { title: 'Windows', value: 'windows' },\r\n        { title: 'Mac', value: 'mac' },\r\n        { title: 'Others', value: 'others' }\r\n    ];\r\n    const custom = ['Individual', 'Partial', 'Total'];\r\n\r\n    const [title, setTitle] = React.useState('');\r\n    const [iconUrl, setIconURL] = React.useState('');\r\n    const [image, setImage] = React.useState('');\r\n    const [linkUrl, setLinkUrl] = React.useState('')\r\n    const [text, setText] = React.useState('');\r\n    const [userRange, setUserRange] = React.useState('');\r\n    const [userNo, setUserNo] = React.useState('');\r\n    const [sysValue, setSysValue] = React.useState([systems[0]]);\r\n    const [methodValue, setMethodValue] = React.useState<string | null>('Individual');\r\n    return (\r\n        <>\r\n            <Box pt={{ xl: 4 }}>\r\n                <Grid item component='h1' style={{ display: 'flex', justifyContent: 'center', paddingBottom: '10px' }}>Send Notification</Grid>\r\n                <GridContainer style={{ padding: '0 100px' }}>\r\n                    <Grid item xs={12} sm={6} md={6} style={{ padding: '0 10px' }}>\r\n                        <TextField\r\n                            id='outlined-confirm-password'\r\n                            label='Enter Title'\r\n                            defaultValue=''\r\n                            name='confirm-password'\r\n                            className={classes.textField}\r\n                            value={title}\r\n                            onChange={(e) => setTitle(e.target.value)}\r\n                            margin='normal'\r\n                            variant='outlined'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} style={{ padding: '0 10px' }}>\r\n                        <TextField\r\n                            id='outlined-confirm-password'\r\n                            label='Enter Icon URL'\r\n                            defaultValue=''\r\n                            name='confirm-password'\r\n                            className={classes.textField}\r\n                            value={iconUrl}\r\n                            onChange={(e) => setIconURL(e.target.value)}\r\n                            margin='normal'\r\n                            variant='outlined'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} style={{ padding: '0 10px' }}>\r\n                        <TextField\r\n                            id='outlined-confirm-password'\r\n                            label='Input Image URL'\r\n                            defaultValue=''\r\n                            name='confirm-password'\r\n                            className={classes.textField}\r\n                            value={image}\r\n                            onChange={(e) => setImage(e.target.value)}\r\n                            margin='normal'\r\n                            variant='outlined'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={6} style={{ padding: '0 10px' }}>\r\n                        <TextField\r\n                            id='outlined-confirm-password'\r\n                            label='Input Link URL(when click notification)'\r\n                            defaultValue=''\r\n                            name='confirm-password'\r\n                            className={classes.textField}\r\n                            value={linkUrl}\r\n                            onChange={(e) => setLinkUrl(e.target.value)}\r\n                            margin='normal'\r\n                            variant='outlined'\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} style={{ padding: '0 10px' }}>\r\n                        <TextField\r\n                            id='outlined-confirm-password'\r\n                            label='Enter Content'\r\n                            defaultValue=''\r\n                            name='confirm-password'\r\n                            className={classes.textField}\r\n                            value={text}\r\n                            multiline\r\n                            rows={3}\r\n                            onChange={(e) => setText(e.target.value)}\r\n                            margin='normal'\r\n                            variant='outlined'\r\n                            style={{ height: '100px' }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} style={{ padding: '10px 15px' }}>\r\n                        <Autocomplete\r\n                            multiple\r\n                            id=\"systems\"\r\n                            value={sysValue}\r\n                            onChange={(event, newValue) => {\r\n                                setSysValue([...newValue]);\r\n                            }}\r\n                            options={systems}\r\n                            getOptionLabel={(option) => option.title}\r\n                            renderTags={(tagValue, getTagProps) =>\r\n                                tagValue.map((option, index) => (\r\n                                    <Chip\r\n                                        label={option.title}\r\n                                        {...getTagProps({ index })}\r\n                                    />\r\n                                ))\r\n                            }\r\n                            renderInput={(params) => (\r\n                                <TextField {...params} label=\"Fixed tag\" placeholder=\"Favorites\" />\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} md={12} style={{ padding: '10px 15px' }}>\r\n\r\n                        <Autocomplete\r\n                            id=\"controllable-states-demo\"\r\n                            value={methodValue}\r\n                            onChange={(event: any, newValue: string | null) => {\r\n\r\n                                setMethodValue(newValue);\r\n                            }}\r\n                            options={custom}\r\n                            renderInput={(params) => <TextField {...params} label=\"Controllable\" />}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={8}>\r\n                        <TextField\r\n                            id='outlined-confirm-password'\r\n                            label={methodValue === 'Individual' ? 'Enter User No: #000, 000' : 'Enter User Range: #00-#000, 00-000'}\r\n                            type='string'\r\n                            defaultValue=''\r\n                            className={classes.textField}\r\n                            value={methodValue === 'Individual' ? userNo : userRange}\r\n                            onChange={(e) => methodValue === 'Individual' ? setUserNo(e.target.value) : setUserRange(e.target.value)}\r\n                            margin='normal'\r\n                            variant='outlined'\r\n                            disabled={methodValue === 'Total' ? true : false}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4} >\r\n                        <Button\r\n                            variant='contained'\r\n                            color='primary'\r\n                            type='button'\r\n                            size='large'\r\n                            onClick={() => onSendNotify()}\r\n                            style={{ margin: '20px 0 0 100px' }}\r\n                            disabled={title.length === 0 ? true : false}\r\n                        >\r\n                            Send Notify\r\n                        </Button>\r\n                    </Grid>\r\n                </GridContainer>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Account;\r\n"],"sourceRoot":""}